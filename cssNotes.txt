CSS
    External CSS
        <link rel="stylesheet" href="style.css">
               type                 actual url

    Internal CSS
        <style></style>   inside of head section

    Inline CSS
        put it inside the tag you're using ie:
            <p style="blahblah"> some text </p>

ID and Class


    ID - a unique identifier

        <h1 id="title">Good Morning</h1>

    Class - an identifier that can have multiple items grouped under it

        <h1 class="blue"> blahblah </h1>

        an element can have two classes at once, ie:
            <h1 class="blue bigText">    ...this element is class blue and class bigText

CSS Basic Syntax

    selector {property: value;}  --> h1 { color: red}

        Selector - which HTML elements the style will be applied to
        Can do more than one at once, ie

            h1, p {color: red;}

    Selector - can be an html element, an id, or a class

        for id, use # ie #big{ font-size: 30px}
        for class, use . ie .big {font-size: 30px}

    Comments - /*   any text    */

Adding Google Fonts:

    Go to google fonts and select "add this style" on desired font

    Into CSS add @import url(enterURLprovidedBYgoogle)

    or add direct to html as a link:
        <link rel="stylesheet" href="urlHERE">

Colors:

    by name: h1 {color: red}

    by RGB: h1 {color: rgb(255,255,255) }

    by RGBA: h1 {color: rbga(255,255,255,0.5) }  -->opacity is from 0 to 1 (0 is transparent)

    by HEX: h1 {color: #FFFFFF}
            -if both digits of RRGGBB are the same, you can shorten to RGB ie:
                -#FF55BB is shortened to #F5B

    by HSL- Hue Saturation Lightness -- I'm not using this but... color: hsl(0%,50%,100%)

Borders:

    h1 {border-style: dotted}

    Frequently used styles:
        -dotted, dashed, solid, double, groove, ridge, inset, outset

    Other attributes:
        border-color, border-width

    h1{ border: 25px, solid, red }
        ***can define all at once using just "border"

    One side only:
        h1{ border-botton: 5 px, dotted, black }

Absolute Units:

    Pixels = px
    cm, mm, in, pt, pc -- these aren't going to be accurate on screens...best for printing web pages

Relative Units:

    % - Use a percentage of the parent elements size
    em - font size relative to the parent element font size
        2em means font is twice the size of the parent font
    rem - font size relative to the root element (<html>)

    Viewport Units - percentage of viewable space
        vw - 1% of screen width
        vh - 1% of screen height

        vmin - 1% of the smaller of height/width
        vmax - 1% of the larger of height/width

Margin and Padding:

    padding- internal space
    margin - external space

    1 value - padding to every side ie, padding: 10px (10 px to every side)

    2 values - first to top/bottom, then to left/right

    3 values - top, left/right, bottom

    4 values - top, right, bottom, left ie, padding: 2px 4px 6px 8px

    Margin:
        auto centers
            -centers the element if the element has a set width
            -img{ margin: auto}

    Padding:
        can make an element stand out...padding increases overall size to accomodate the gap
        gives a background to the element

    Seems like you should combine margin and padding for effect

Background
    Color or Image (probably more options as well)

    background-repeat
        repeat...repeat to fill entire viewport
        no-repeat...don't repeat
        repeat-x...repeat across the x axis
        repeat-y

    background-attachment
        fixed...background stays in place as you scroll
        scroll...background moves

    background-size: <num>%
        changes the size of the image by <num> %

Positioning
    position: absolute
        absolute pulls an element out of the plane of the normal flow elements

        absolute elements will have height and width auto set to the h and w of the content
            To change the element to stretch the entire way, do the the following:
                -set an h or w value, then set left and right or top and bottom to 0, ie:
                    .child {
                     position: absolute;
                     width: 50px;
                     background-color: rgb(250, 135, 135);
                     top: 0;
                     bottom: 0;
                    }  <--This makes a left side nav bar -->

    position: relative
        set to a position relative to it's original position on the page
        this still moves it to a higher plane, but all other objects stay where they are
            -basically, its spot is still reserved on the other plane

    position: fixed
        same as absolute, but stays still even during scrolling

    position: sticky
        -similar to fixed, but the heading stays at the top until the next heading pushes it aside
        -must assign a top value (where does the bar stick to), ie:

            .child {
                position: sticky;
                top: 0px <!--the child object will stick to the very top of the parent-->
            }

    Positioning properties:

        only works if you've set a position (defaults to static, and properties won't work)

        top - how far down from the top the item should be
        bottom/left/right -- same concept
            can be pixels or percentage (maybe others too?)

Float
    left
    right
    inherit (use same float value as parent container)

    lets an element "float" to the left or right of it's parent container. Other items (ie text)
    can fill in to the side of the element (kind of wrap around styling)

    not legal with absolute positioning

Clear:
    used after an element is set to float.  Next element will account for that float, unless clear is used

    clear: none  -- continue to account for float
    clear: left  -- ignore any float left item
    clear: right -- ignore any float right items
    clear: both  -- don't account for previous items float value

FLEXBOX!
    Main axis - axis along which items will be placed by default
    cross axis - perpendicular to the main axis
    main start / main end - borders where the flexbox begins and ends
    cross start / cross end - where the cross axis begins and ends
    main size / cross size

    set-up:
        item must have display property set to "flex" (as opposed to block)
            -this should be the parent container

        <div class="flex-container">
          <div class="flex-item">item 1</div>
          <div class="flex-item">item 2</div>
          <div class="flex-item">item 3</div>
        </div>















